[{"C:\\Users\\Matheus Oliveira\\Code\\TCCEstufas\\website\\src\\index.js":"1","C:\\Users\\Matheus Oliveira\\Code\\TCCEstufas\\website\\src\\reportWebVitals.js":"2","C:\\Users\\Matheus Oliveira\\Code\\TCCEstufas\\website\\src\\views\\App.js":"3","C:\\Users\\Matheus Oliveira\\Code\\TCCEstufas\\website\\src\\routes.js":"4","C:\\Users\\Matheus Oliveira\\Code\\TCCEstufas\\website\\src\\views\\Erro404.js":"5","C:\\Users\\Matheus Oliveira\\Code\\TCCEstufas\\website\\src\\views\\Home.js":"6","C:\\Users\\Matheus Oliveira\\Code\\TCCEstufas\\website\\src\\views\\leituras\\Leituras.js":"7","C:\\Users\\Matheus Oliveira\\Code\\TCCEstufas\\website\\src\\views\\culturas\\Culturas.js":"8","C:\\Users\\Matheus Oliveira\\Code\\TCCEstufas\\website\\src\\views\\controladores\\Controladores.js":"9","C:\\Users\\Matheus Oliveira\\Code\\TCCEstufas\\website\\src\\views\\sensores\\Sensores.js":"10","C:\\Users\\Matheus Oliveira\\Code\\TCCEstufas\\website\\src\\components\\Cultura.js":"11","C:\\Users\\Matheus Oliveira\\Code\\TCCEstufas\\website\\src\\components\\Table.js":"12","C:\\Users\\Matheus Oliveira\\Code\\TCCEstufas\\website\\src\\components\\LineChart.js":"13","C:\\Users\\Matheus Oliveira\\Code\\TCCEstufas\\website\\src\\components\\Controlador.js":"14","C:\\Users\\Matheus Oliveira\\Code\\TCCEstufas\\website\\src\\components\\Sensor.js":"15","C:\\Users\\Matheus Oliveira\\Code\\TCCEstufas\\website\\src\\assets\\js\\customStyles.js":"16","C:\\Users\\Matheus Oliveira\\Code\\TCCEstufas\\website\\src\\views\\relatorios\\Relatorios.js":"17","C:\\Users\\Matheus Oliveira\\Code\\TCCEstufas\\website\\src\\store\\index.js":"18","C:\\Users\\Matheus Oliveira\\Code\\TCCEstufas\\website\\src\\store\\reducers\\index.js":"19","C:\\Users\\Matheus Oliveira\\Code\\TCCEstufas\\website\\src\\store\\reducers\\app.js":"20","C:\\Users\\Matheus Oliveira\\Code\\TCCEstufas\\website\\src\\store\\actions\\app.js":"21","C:\\Users\\Matheus Oliveira\\Code\\TCCEstufas\\website\\src\\views\\history.js":"22"},{"size":738,"mtime":1634956132674,"results":"23","hashOfConfig":"24"},{"size":362,"mtime":499162500000,"results":"25","hashOfConfig":"24"},{"size":1227,"mtime":1635982129229,"results":"26","hashOfConfig":"24"},{"size":1185,"mtime":1635803294102,"results":"27","hashOfConfig":"24"},{"size":86,"mtime":1626461790616,"results":"28","hashOfConfig":"24"},{"size":3072,"mtime":1638146536979,"results":"29","hashOfConfig":"24"},{"size":1871,"mtime":1626872055707,"results":"30","hashOfConfig":"31"},{"size":4463,"mtime":1637890117199,"results":"32","hashOfConfig":"24"},{"size":3779,"mtime":1637892973981,"results":"33","hashOfConfig":"24"},{"size":12957,"mtime":1638146260230,"results":"34","hashOfConfig":"24"},{"size":771,"mtime":1635202815777,"results":"35","hashOfConfig":"24"},{"size":1969,"mtime":1626720500601,"results":"36","hashOfConfig":"24"},{"size":664,"mtime":1636154331678,"results":"37","hashOfConfig":"24"},{"size":1023,"mtime":1635206041731,"results":"38","hashOfConfig":"24"},{"size":1086,"mtime":1638146508629,"results":"39","hashOfConfig":"24"},{"size":176,"mtime":1635207795695,"results":"40","hashOfConfig":"24"},{"size":6199,"mtime":1637979870510,"results":"41","hashOfConfig":"24"},{"size":292,"mtime":1635981924190,"results":"42","hashOfConfig":"24"},{"size":164,"mtime":1635981952137,"results":"43","hashOfConfig":"24"},{"size":789,"mtime":1635976891238,"results":"44","hashOfConfig":"24"},{"size":454,"mtime":1635907859463,"results":"45","hashOfConfig":"24"},{"size":117,"mtime":1635979470054,"results":"46","hashOfConfig":"24"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},"11qeo3k",{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"49"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},"1083crc",{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"49"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"49"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84"},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"49"},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"49"},{"filePath":"93","messages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"49"},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},"C:\\Users\\Matheus Oliveira\\Code\\TCCEstufas\\website\\src\\index.js",[],["102","103"],"C:\\Users\\Matheus Oliveira\\Code\\TCCEstufas\\website\\src\\reportWebVitals.js",[],"C:\\Users\\Matheus Oliveira\\Code\\TCCEstufas\\website\\src\\views\\App.js",["104","105"],"import React from 'react'\r\nimport '../assets/css/customStyles.css'\r\nimport { BrowserRouter, Switch, Route } from 'react-router-dom'\r\nimport { Menu, Icon, Container } from 'semantic-ui-react'\r\nimport { routes } from '../routes'\r\nimport uniqid from 'uniqid'\r\nimport { Provider, useDispatch } from \"react-redux\"\r\nimport { ConnectedRouter } from 'connected-react-router'\r\nimport store from '../store'\r\n\r\nconst App = () => {\r\n  return (<Provider store={store}>\r\n    <BrowserRouter>\r\n      <div>\r\n        <Menu color='green' inverted className='top fixed'>\r\n          <Menu.Item header icon>Estufas</Menu.Item>\r\n          {routes.map((item) => {\r\n            if (item.path !== '*') {\r\n              return <Menu.Item as='a' href={item.path} key={uniqid()}>\r\n                <Icon name={item.icon} /> {item.title}\r\n              </Menu.Item>\r\n            }\r\n\r\n            return null\r\n          })}\r\n        </Menu>\r\n\r\n        <Container style={{ marginTop: '4em' }}>\r\n          <Switch>\r\n            {routes.map(item => <Route path={item.path} exact={item.exact} component={item.component} key={uniqid()} />)}\r\n          </Switch>\r\n        </Container>\r\n      </div>\r\n    </BrowserRouter>\r\n  </Provider>\r\n  )\r\n}\r\n\r\nexport default App","C:\\Users\\Matheus Oliveira\\Code\\TCCEstufas\\website\\src\\routes.js",[],"C:\\Users\\Matheus Oliveira\\Code\\TCCEstufas\\website\\src\\views\\Erro404.js",[],"C:\\Users\\Matheus Oliveira\\Code\\TCCEstufas\\website\\src\\views\\Home.js",["106","107","108"],"import React, { useEffect, useState } from 'react'\r\nimport { Header, Divider, Grid, Icon } from 'semantic-ui-react'\r\n// import LineChart from '../components/LineChart'\r\nimport { colors } from '../assets/js/customStyles'\r\nimport mqtt from 'mqtt'\r\nimport axios from 'axios'\r\nimport Cultura from '../components/Cultura'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport * as AppActions from '../store/actions/app'\r\nimport moment from 'moment'\r\nimport uniqid from 'uniqid'\r\n\r\nconst Home = () => {\r\n    const dispatch = useDispatch();\r\n    const [culturas, setCulturas] = useState([])\r\n    const [controladores, setControladores] = useState([])\r\n    const [sensores, setSensores] = useState([])\r\n    const [leituras, setLeituras] = useState([])\r\n\r\n    const handleMQTT = () => {\r\n        var client = mqtt.connect('ws://broker.hivemq.com:8000/mqtt')\r\n\r\n        client.on('connect', function () {\r\n            client.subscribe('mobg/#', { qos: 2 })\r\n        })\r\n\r\n        client.on('message', async function (topic, message) {\r\n            let sensor_id = topic.split('/')[1]\r\n            \r\n            console.log({ \r\n                created_at: moment().format('YYYY-MM-DD H:mm:ss'),\r\n                id: uniqid(),\r\n                sensor_id,\r\n                valor: parseInt(message.toString())\r\n            })\r\n\r\n            await setLeituras(leituras => [\r\n                { \r\n                    created_at: moment().format('YYYY-MM-DD HH:mm:ss'),\r\n                    id: uniqid(),\r\n                    sensor_id,\r\n                    valor: parseInt(message.toString())\r\n                },\r\n                ...leituras\r\n            ]);\r\n        })\r\n    }\r\n\r\n    const getLeituras = async () => {\r\n        let response = await axios.get('/leituras')\r\n\r\n        await setCulturas(response.data.culturas)\r\n        await setControladores(response.data.controladores)\r\n        await setSensores(response.data.sensores)\r\n        await setLeituras(response.data.leituras)\r\n    }\r\n\r\n    useEffect(() => {\r\n        handleMQTT()\r\n        getLeituras()\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        console.log(leituras.length)\r\n    }, [leituras])\r\n\r\n    return (<>\r\n        <Header style={{ marginTop: 20, color: colors.green }} as='h2' icon textAlign='center'>\r\n            <Icon name='info' />\r\n            Monitoramento da Estufa\r\n        </Header>\r\n\r\n        <Divider />\r\n\r\n        <Grid stackable>\r\n            <Grid.Row columns='equal'>\r\n                <Grid.Column style={{ alignItems: 'center', backgroundColor: 'white', borderRadius: 10, padding: 20 }}>\r\n                    {culturas.map(cultura => {\r\n                        return <Cultura id={cultura.id} \r\n                                        culturas={culturas} \r\n                                        controladores={controladores}\r\n                                        sensores={sensores}\r\n                                        leituras={leituras} />\r\n                    })}\r\n                </Grid.Column>\r\n            </Grid.Row>\r\n        </Grid>\r\n    </>)\r\n}\r\n\r\nexport default Home\r\n\r\n","C:\\Users\\Matheus Oliveira\\Code\\TCCEstufas\\website\\src\\views\\leituras\\Leituras.js",[],["109","110"],"C:\\Users\\Matheus Oliveira\\Code\\TCCEstufas\\website\\src\\views\\culturas\\Culturas.js",["111","112","113"],"import React, { useEffect, useState } from 'react'\r\nimport Table from '../../components/Table'\r\nimport { Form, Checkbox, Grid, Button } from 'semantic-ui-react'\r\nimport uniqid from 'uniqid'\r\nimport axios from 'axios'\r\n\r\nconst val = [\r\n    {\r\n        id: 1,\r\n        descricao: 'Estufa 1',\r\n        ativa: true\r\n    },\r\n    {\r\n        id: 2,\r\n        descricao: 'Estufa 2',\r\n        ativa: false\r\n    }\r\n]\r\n\r\n\r\nconst Culturas = () => {\r\n    const [valores, setValores] = useState([])\r\n    const [descricao, setDescricao] = useState('')\r\n    const [ativa, setIsAtiva] = useState(true)\r\n    const [isEditing, setIsEditing] = useState(false)\r\n    const [index, setIndex] = useState(false)\r\n    \r\n    useEffect(async () => {\r\n        let response = await axios.get('/culturas')\r\n        // setValores(val)\r\n        console.log(response.data)\r\n        setValores(response.data.map(item => {\r\n            return {...item, ativa: Boolean(item.ativa)}\r\n        }))\r\n    }, [])\r\n\r\n    const salvar = async () => {\r\n        let response;\r\n\r\n        if(isEditing) {\r\n            let aux = valores;\r\n\r\n            aux[index].descricao = descricao;\r\n            aux[index].ativa = ativa;\r\n\r\n            try {\r\n                await axios.put('/culturas', aux[index])\r\n            }\r\n            catch (e) {\r\n                alert(e.response.data.mensagem)\r\n            }\r\n            finally {\r\n                await setValores(aux)\r\n                await setIsEditing(false)\r\n            }\r\n        } else {\r\n            try {\r\n                response = await axios.post('/culturas', {\r\n                    descricao,\r\n                    ativa\r\n                })\r\n            }\r\n            catch (e) {\r\n                alert(e.response.data.mensagem)\r\n            }\r\n            finally {\r\n                await setValores([...valores,  {\r\n                    id: response.data[0].id,\r\n                    descricao,\r\n                    ativa\r\n                }])\r\n            }\r\n        }\r\n\r\n        setDescricao('')\r\n        setIsAtiva(true)\r\n    }\r\n\r\n    const editar = async (id) => {\r\n        let index = valores.findIndex(item => item.id === id)\r\n\r\n        await setIsEditing(true)\r\n        await setIndex(index)\r\n\r\n        await setDescricao(valores[index].descricao)\r\n        await setIsAtiva(valores[index].ativa)\r\n    }\r\n\r\n    const deletar = async (id) => {\r\n        try {\r\n            await axios.delete('/culturas', { \r\n                data: {\r\n                    id\r\n                } \r\n            })\r\n        }\r\n        catch (e) {\r\n            console.log(e)\r\n            alert(e.response.data.mensagem)\r\n        }\r\n        finally {\r\n            await setValores(valores.filter(item => item.id !== id))\r\n        }\r\n\r\n    }\r\n\r\n    const cancelar = async () => {\r\n        await setIsEditing(false)\r\n\r\n        setDescricao('')\r\n        setIsAtiva(true)\r\n    }\r\n\r\n    const actions = [\r\n        {\r\n            icon: 'pencil',\r\n            color: 'green',\r\n            action: editar\r\n        },\r\n        {\r\n            icon: 'times',\r\n            color: 'red',\r\n            action: deletar\r\n        }\r\n    ]\r\n\r\n    return <div>\r\n        <Grid>\r\n            <Grid.Column floated='left' width={5}>\r\n                <h1>Culturas</h1>\r\n            </Grid.Column>\r\n        </Grid>\r\n\r\n        <Form style={{ marginTop: 20 }}>\r\n            <Form.Group widths='equal'>\r\n                <Form.Input value={descricao} onChange={item => setDescricao(item.target.value)} label='Descrição' placeholder='Descrição' />\r\n                <Form.Field>\r\n                    <label>Está Ativa?</label>\r\n                    <Checkbox checked={ativa} onChange={() => { setIsAtiva(!ativa) }} toggle style={{ marginTop: 5 }} />\r\n                </Form.Field>\r\n            </Form.Group>\r\n            <Button.Group floated='right' style={{ marginBottom: 20 }}>\r\n                <Button primary onClick={salvar}>\r\n                    Salvar\r\n                </Button>\r\n                <div class=\"or\" data-text=\"ou\"></div>\r\n                <Button onClick={cancelar}>\r\n                    Cancelar\r\n                </Button>\r\n            </Button.Group>\r\n        </Form>\r\n\r\n        <Table\r\n            unstackable\r\n            headers={['Descrição', 'Ativa?']}\r\n            keys={['descricao', 'ativa']}\r\n            values={valores} \r\n            actions={actions} \r\n            isEditing={isEditing}\r\n            index={index}/>\r\n    </div>\r\n}\r\n\r\nexport default Culturas\r\n\r\n","C:\\Users\\Matheus Oliveira\\Code\\TCCEstufas\\website\\src\\views\\controladores\\Controladores.js",["114","115","116","117"],"import React, { useEffect, useState } from 'react'\r\nimport Table from '../../components/Table'\r\nimport { Form, Checkbox, Grid, Button } from 'semantic-ui-react'\r\nimport uniqid from 'uniqid'\r\nimport axios from 'axios'\r\n\r\nconst val = [\r\n    {\r\n        id: 1,\r\n        nome: 'Arduino Mega 2560 - Início',\r\n    },\r\n    {\r\n        id: 2,\r\n        nome: 'Arduino Mega 2560 - Janela',\r\n    }\r\n]\r\n\r\n\r\nconst Controladores = () => {\r\n    const [valores, setValores] = useState([])\r\n    const [nome, setNome] = useState('')\r\n    const [isEditing, setIsEditing] = useState(false)\r\n    const [index, setIndex] = useState(false)\r\n    const endpoint = '/controladores'\r\n\r\n    useEffect(async () => {\r\n        let response = await axios.get(endpoint)\r\n        setValores(response.data)\r\n        // setValores(val)\r\n    }, [])\r\n\r\n    const salvar = async () => {\r\n        let response;\r\n\r\n        if(isEditing) {\r\n            let aux = valores;\r\n\r\n            aux[index].nome = nome;\r\n\r\n            try {\r\n                await axios.put(endpoint, aux[index])\r\n            }\r\n            catch (e) {\r\n                alert(e.response.data.mensagem)\r\n            }\r\n            finally {\r\n                await setValores(aux)\r\n                await setIsEditing(false)\r\n            }\r\n        } else {\r\n            try {\r\n                response = await axios.post(endpoint, {\r\n                    nome\r\n                })\r\n            }\r\n            catch (e) {\r\n                alert(e.response.data.mensagem)\r\n            }\r\n            finally {\r\n                await setValores([...valores,  {\r\n                    id: response.data[0].id,\r\n                    nome\r\n                }])\r\n            }\r\n        }\r\n\r\n        setNome('')\r\n    }\r\n\r\n    const editar = async (id) => {\r\n        let index = valores.findIndex(item => item.id === id)\r\n\r\n        await setIsEditing(true)\r\n        await setIndex(index)\r\n\r\n        await setNome(valores[index].nome)\r\n    }\r\n\r\n    const deletar = async (id) => {\r\n        try {\r\n            await axios.delete(endpoint, { \r\n                data: {\r\n                    id\r\n                } \r\n            })\r\n        }\r\n        catch (e) {\r\n            console.log(e)\r\n            alert(e.response.data.mensagem)\r\n        }\r\n        finally {\r\n            await setValores(valores.filter(item => item.id !== id))\r\n        }\r\n    }\r\n\r\n    const cancelar = async () => {\r\n        await setIsEditing(false)\r\n\r\n        setNome('')\r\n    }\r\n\r\n    const actions = [\r\n        {\r\n            icon: 'pencil',\r\n            color: 'green',\r\n            action: editar\r\n        },\r\n        {\r\n            icon: 'times',\r\n            color: 'red',\r\n            action: deletar\r\n        }\r\n    ]\r\n\r\n    return <div>\r\n        <Grid>\r\n            <Grid.Column floated='left' width={5}>\r\n                <h1>Controladores</h1>\r\n            </Grid.Column>\r\n        </Grid>\r\n\r\n        <Form style={{ marginTop: 20 }}>\r\n            <Form.Group widths='equal'>\r\n                <Form.Input value={nome} onChange={item => setNome(item.target.value)} label='Nome' placeholder='Nome' />\r\n            </Form.Group>\r\n            <Button.Group floated='right' style={{ marginBottom: 20 }}>\r\n                <Button primary onClick={salvar}>\r\n                    Salvar\r\n                </Button>\r\n                <div class=\"or\" data-text=\"ou\"></div>\r\n                <Button onClick={cancelar}>\r\n                    Cancelar\r\n                </Button>\r\n            </Button.Group>\r\n        </Form>\r\n\r\n        <Table\r\n            unstackable\r\n            headers={['Nome']}\r\n            keys={['nome']}\r\n            values={valores} \r\n            actions={actions} \r\n            isEditing={isEditing}\r\n            index={index}/>\r\n    </div>\r\n}\r\n\r\nexport default Controladores","C:\\Users\\Matheus Oliveira\\Code\\TCCEstufas\\website\\src\\views\\sensores\\Sensores.js",["118","119","120","121"],"import React, { useEffect, useState } from 'react'\r\nimport { Form, Table, Grid, Button, Icon } from 'semantic-ui-react'\r\nimport uniqid from 'uniqid'\r\nimport axios from 'axios'\r\n\r\nconst val = [\r\n    {\r\n        id: 1,\r\n        descricao: 'Sensor de Umidade - Porta',\r\n        porta: 12,\r\n        tipo_porta: 0,\r\n        tipo_sensor: 'U',\r\n        unidade: '%',\r\n        referencia_minima: 200,\r\n        referencia_maxima: 500,\r\n        porta_atuador_minimo: 12,\r\n        porta_atuador_maximo: 13,\r\n        controlador_id: 1\r\n    },\r\n    {\r\n        id: 2,\r\n        descricao: 'Sensor de Luminosidade - Teto',\r\n        porta: 13,\r\n        tipo_porta: 1,\r\n        tipo_sensor: 'L',\r\n        unidade: 'lux',\r\n        referencia_minima: 200,\r\n        referencia_maxima: 500,\r\n        porta_atuador_minimo: 12,\r\n        porta_atuador_maximo: null,\r\n        controlador_id: 2\r\n    },\r\n    {\r\n        id: 3,\r\n        descricao: 'Sensor de Umidade do Solo - Meio',\r\n        porta: 14,\r\n        tipo_porta: 0,\r\n        tipo_sensor: 'H',\r\n        unidade: '',\r\n        referencia_minima: 200,\r\n        referencia_maxima: 500,\r\n        porta_atuador_minimo: 14,\r\n        porta_atuador_maximo: 11,\r\n        controlador_id: 1\r\n    }\r\n]\r\n\r\n\r\nconst Sensores = () => {\r\n    const [valores, setValores] = useState([])\r\n\r\n    const [descricao, setDescricao] = useState('')\r\n    const [porta, setPorta] = useState('')\r\n    const [tipoPorta, setTipoPorta] = useState('')\r\n    const [tipoSensor, setTipoSensor] = useState('')\r\n    const [referenciaMinima, setReferenciaMinima] = useState('')\r\n    const [referenciaMaxima, setReferenciaMaxima] = useState('')\r\n    const [portaMinimo, setPortaMinimo] = useState('')\r\n    const [portaMaximo, setPortaMaximo] = useState('')\r\n    const [unidade, setUnidade] = useState('')\r\n    const [controlador_id, setControlador] = useState(null)\r\n    const [controladores, setControladores] = useState([])\r\n    const [optionsControladores, setOptionsControladores] = useState([])\r\n\r\n    const [isEditing, setIsEditing] = useState(false)\r\n    const [index, setIndex] = useState(false)\r\n    const endpoint = '/sensores'\r\n\r\n    useEffect(async () => {\r\n        let response = await axios.get(endpoint)\r\n\r\n        setValores(response.data)\r\n\r\n        response = await axios.get('/controladores')\r\n\r\n        setControladores(response.data)\r\n        let optionsControladores = response.data.map(item => { \r\n            return { \r\n                key: uniqid(), \r\n                text: item.nome, \r\n                value: item.id \r\n            } \r\n        })\r\n        setOptionsControladores(optionsControladores)\r\n    }, [])\r\n\r\n    const limparFormulario = () => {\r\n        setDescricao('')\r\n        setPorta('')\r\n        setReferenciaMinima('')\r\n        setReferenciaMaxima('')\r\n        setPortaMinimo('')\r\n        setPortaMaximo('')\r\n        setUnidade('')\r\n        setTipoPorta(null)\r\n        setTipoSensor(null)\r\n        setControlador(null)\r\n    }\r\n\r\n    const salvar = async () => {\r\n        let response;\r\n\r\n        if (isEditing) {\r\n            let aux = valores;\r\n\r\n            aux[index].descricao = descricao;\r\n            aux[index].porta = porta;\r\n            aux[index].tipo_porta = tipoPorta;\r\n            aux[index].tipo_sensor = tipoSensor;\r\n            aux[index].controlador_id = controlador_id;\r\n            aux[index].referencia_minima = referenciaMinima;\r\n            aux[index].referencia_maxima = referenciaMaxima;\r\n            aux[index].porta_atuador_minimo = portaMinimo;\r\n            aux[index].porta_atuador_maximo = portaMaximo;\r\n            aux[index].unidade = unidade;\r\n\r\n            try {\r\n                await axios.put(endpoint, aux[index])\r\n            }\r\n            catch (e) {\r\n                alert(e.response.data.mensagem)\r\n            }\r\n            finally {\r\n                await setValores(aux)\r\n                await setIsEditing(false)\r\n            }\r\n        } else {\r\n            try {\r\n                response = await axios.post(endpoint, {\r\n                    descricao,\r\n                    porta,\r\n                    tipo_porta: tipoPorta,\r\n                    controlador_id: controlador_id,\r\n                    tipo_sensor: tipoSensor,\r\n                    referencia_minima: referenciaMinima,\r\n                    referencia_maxima: referenciaMaxima,\r\n                    porta_atuador_minimo: portaMinimo,\r\n                    porta_atuador_maximo: portaMaximo,\r\n                    unidade\r\n                })\r\n            }\r\n            catch (e) {\r\n                alert(e.response.data.mensagem)\r\n            }\r\n            finally {\r\n                await setValores([...valores, {\r\n                    id: response.data[0].id,\r\n                    descricao,\r\n                    porta,\r\n                    tipo_porta: tipoPorta,\r\n                    controlador_id: controlador_id,\r\n                    tipo_sensor: tipoSensor,\r\n                    referencia_minima: referenciaMinima,\r\n                    referencia_maxima: referenciaMaxima,\r\n                    porta_atuador_minimo: portaMinimo,\r\n                    porta_atuador_maximo: portaMaximo,\r\n                    unidade\r\n                }])\r\n            }\r\n        }\r\n\r\n        limparFormulario()\r\n    }\r\n\r\n    const editar = async (id) => {\r\n        let index = valores.findIndex(item => item.id === id)\r\n\r\n        await setIsEditing(true)\r\n        await setIndex(index)\r\n\r\n        await setDescricao(valores[index].descricao)\r\n        await setPorta(valores[index].porta)\r\n        await setTipoPorta(valores[index].tipo_porta)\r\n        await setControlador(valores[index].controlador_id)\r\n        await setReferenciaMinima(valores[index].referencia_minima)\r\n        await setReferenciaMaxima(valores[index].referencia_maxima)\r\n        await setPortaMinimo(valores[index].porta_atuador_minimo ?? '')\r\n        await setPortaMaximo(valores[index].porta_atuador_maximo ?? '')\r\n        await setUnidade(valores[index].unidade)\r\n        await setTipoSensor(valores[index].tipo_sensor)\r\n    }\r\n\r\n    const deletar = async (id) => {\r\n        try {\r\n            await axios.delete(endpoint, { \r\n                data: {\r\n                    id\r\n                } \r\n            })\r\n        }\r\n        catch (e) {\r\n            console.log(e)\r\n            alert(e.response.data.mensagem)\r\n        }\r\n        finally {\r\n            await setValores(valores.filter(item => item.id !== id))\r\n        }\r\n    }\r\n\r\n    const cancelar = async () => {\r\n        await setIsEditing(false)\r\n\r\n        limparFormulario()\r\n    }\r\n\r\n    const getTipoSensorPorExtenso = (tipoSensor) => {\r\n        switch (tipoSensor) {\r\n            case 'L':\r\n                return \"Luminosidade\"\r\n            case 'H':\r\n                return \"Higrômetro\"\r\n            case 'U':\r\n                return \"Umidade\"\r\n            case 'T':\r\n                return \"Temperatura do Ar\"\r\n        }\r\n    }\r\n\r\n    const actions = [\r\n        {\r\n            icon: 'pencil',\r\n            color: 'green',\r\n            action: editar\r\n        },\r\n        {\r\n            icon: 'times',\r\n            color: 'red',\r\n            action: deletar\r\n        }\r\n    ]\r\n\r\n    const optionsTipoPorta = [\r\n        { key: uniqid(), text: 'Digital', value: 0 },\r\n        { key: uniqid(), text: 'Analógica', value: 1 }\r\n    ]\r\n\r\n    const optionsTipoSensor = [\r\n        { key: uniqid(), text: 'Luminosidade', value: 'L' },\r\n        { key: uniqid(), text: 'Umidade do Ar', value: 'U' },\r\n        { key: uniqid(), text: 'Higrômetro', value: 'H' },\r\n        { key: uniqid(), text: 'Temperatura do Ar', value: 'T' }\r\n    ]\r\n\r\n    return <div>\r\n        <Grid>\r\n            <Grid.Column floated='left' width={5}>\r\n                <h1>Sensores</h1>\r\n            </Grid.Column>\r\n        </Grid>\r\n\r\n        <Form style={{ marginTop: 20 }}>\r\n            <Form.Group widths='equal'>\r\n                <Form.Input value={descricao} onChange={item => setDescricao(item.target.value)} label='Descrição' placeholder='Descrição' />\r\n                <Form.Input type={'number'} value={porta} onChange={item => setPorta(item.target.value)} label='Número da Porta' placeholder='Número da Porta' />\r\n            </Form.Group>\r\n            <Form.Group widths='equal'>\r\n                <Form.Select options={optionsTipoPorta} onChange={(e, { value }) => { setTipoPorta(value) }} value={tipoPorta} label='Tipo da Porta' placeholder='Tipo da Porta' />\r\n                <Form.Select options={optionsControladores} label='Controlador' placeholder='Controlador' onChange={(e, { value }) => { setControlador(value) }} value={controlador_id} />\r\n                <Form.Select options={optionsTipoSensor} label='Tipo do Sensor' placeholder='Tipo do Sensor' onChange={(e, { value }) => { setTipoSensor(value) }} value={tipoSensor} />\r\n            </Form.Group>\r\n            <Form.Group widths='equal'>\r\n                <Form.Input value={referenciaMinima} onChange={item => setReferenciaMinima(item.target.value)} label='Referência Mínima' placeholder='Referência Mínima' />\r\n                <Form.Input value={referenciaMaxima} onChange={item => setReferenciaMaxima(item.target.value)} label='Referência Máxima' placeholder='Referência Máxima' />\r\n                <Form.Input value={unidade} onChange={item => setUnidade(item.target.value)} label='Unidade' placeholder='ex. %, lux...' />\r\n            </Form.Group>\r\n            <Form.Group widths='equal'>\r\n                <Form.Input value={portaMinimo} onChange={item => setPortaMinimo(item.target.value)} label='Porta do Atuador Mínimo' placeholder='(Leitura abaixo do Mínimo)' />\r\n                <Form.Input value={portaMaximo} onChange={item => setPortaMaximo(item.target.value)} label='Porta do Atuador Máximo' placeholder='(Leitura acima do Máximo)' />\r\n            </Form.Group>\r\n            <Button.Group floated='right' style={{ marginBottom: 20 }}>\r\n                <Button primary onClick={salvar}>\r\n                    Salvar\r\n                </Button>\r\n                <div class=\"or\" data-text=\"ou\"></div>\r\n                <Button onClick={cancelar}>\r\n                    Cancelar\r\n                </Button>\r\n            </Button.Group>\r\n        </Form>\r\n\r\n        <Table celled unstackable>\r\n            <Table.Header>\r\n                <Table.Row>\r\n                    <Table.HeaderCell key={uniqid()}>Descrição</Table.HeaderCell>\r\n                    <Table.HeaderCell key={uniqid()}>Porta</Table.HeaderCell>\r\n                    <Table.HeaderCell key={uniqid()}>Tipo da Porta</Table.HeaderCell>\r\n                    <Table.HeaderCell key={uniqid()}>Tipo do Sensor</Table.HeaderCell>\r\n                    <Table.HeaderCell key={uniqid()}>Ref. Mínima</Table.HeaderCell>\r\n                    <Table.HeaderCell key={uniqid()}>Ref. Máxima</Table.HeaderCell>\r\n                    <Table.HeaderCell key={uniqid()}>Porta Min.</Table.HeaderCell>\r\n                    <Table.HeaderCell key={uniqid()}>Porta Máx.</Table.HeaderCell>\r\n                    <Table.HeaderCell key={uniqid()}>Controlador</Table.HeaderCell>\r\n                    <Table.HeaderCell key={uniqid()}>Unidade</Table.HeaderCell>\r\n                    <Table.HeaderCell key={uniqid()}>Ações</Table.HeaderCell>\r\n                </Table.Row>\r\n            </Table.Header>\r\n\r\n            <Table.Body>\r\n                {valores.map((item, id) => {\r\n                    return <Table.Row active={isEditing && index === id} key={uniqid()}>\r\n                        <Table.Cell key={uniqid()}>{item.descricao}</Table.Cell>\r\n                        <Table.Cell key={uniqid()}>{item.porta}</Table.Cell>\r\n                        <Table.Cell key={uniqid()}>{item.tipo_porta == 0 ? 'Analógica' : 'Digital'}</Table.Cell>\r\n                        <Table.Cell key={uniqid()}>{getTipoSensorPorExtenso(item.tipo_sensor)}</Table.Cell>\r\n                        <Table.Cell key={uniqid()}>{item.referencia_minima}</Table.Cell>\r\n                        <Table.Cell key={uniqid()}>{item.referencia_maxima}</Table.Cell>\r\n                        <Table.Cell key={uniqid()}>{item.porta_atuador_minimo}</Table.Cell>\r\n                        <Table.Cell key={uniqid()}>{item.porta_atuador_maximo}</Table.Cell>\r\n                        <Table.Cell key={uniqid()}>{controladores.find(con => con.id === item.controlador_id)?.nome}</Table.Cell>\r\n                        <Table.Cell key={uniqid()}>{item.unidade}</Table.Cell>\r\n\r\n                        <Table.Cell className='center aligned'>\r\n                            {actions.map(action => {\r\n                                return <Button icon onClick={() => action.action(item.id)} color={action.color} key={uniqid()}>\r\n                                    <Icon name={action.icon} />\r\n                                </Button>\r\n                            })}\r\n                        </Table.Cell>\r\n                    </Table.Row>\r\n                })}\r\n            </Table.Body>\r\n        </Table>\r\n    </div>\r\n}\r\n\r\nexport default Sensores","C:\\Users\\Matheus Oliveira\\Code\\TCCEstufas\\website\\src\\components\\Cultura.js",[],"C:\\Users\\Matheus Oliveira\\Code\\TCCEstufas\\website\\src\\components\\Table.js",[],"C:\\Users\\Matheus Oliveira\\Code\\TCCEstufas\\website\\src\\components\\LineChart.js",[],"C:\\Users\\Matheus Oliveira\\Code\\TCCEstufas\\website\\src\\components\\Controlador.js",[],"C:\\Users\\Matheus Oliveira\\Code\\TCCEstufas\\website\\src\\components\\Sensor.js",["122","123"],"import moment from \"moment\"\r\nimport { Divider, Grid } from \"semantic-ui-react\"\r\nimport { colors } from '../assets/js/customStyles'\r\n\r\nconst Sensor = ({ sensor, leituras }) => {\r\n    // let controlador = controladores.find(item => item.id === id)\r\n    let leiturasSensor = leituras.filter(item => item.sensor_id == sensor.id)\r\n\r\n    return <div style={styles.cardContainer}>\r\n        <div>{sensor.descricao} - {sensor.id}</div>\r\n        <Divider />\r\n        <div style={styles.mainText}>\r\n            {leiturasSensor[0]?.valor || '-'}\r\n            {' ' + (sensor?.unidade || '')}\r\n        </div>\r\n        <h4 style={{ fontFamily: 'Roboto Thin' }}>{moment(leiturasSensor[0]?.created_at).format('DD/MM/YYYY HH:mm:ss')}</h4>\r\n    </div>\r\n}\r\n\r\nconst styles = {\r\n    cardContainer: {\r\n        padding: 20, \r\n        borderRadius: 20,\r\n        backgroundColor: colors.green,\r\n        color: '#fff'\r\n    },\r\n    mainText: {\r\n        fontFamily: 'Roboto Thin',\r\n        fontSize: '3em',\r\n        color: '#fff',\r\n        marginTop: 40,\r\n        marginBottom: 40\r\n    }\r\n}\r\n\r\nexport default Sensor","C:\\Users\\Matheus Oliveira\\Code\\TCCEstufas\\website\\src\\assets\\js\\customStyles.js",[],"C:\\Users\\Matheus Oliveira\\Code\\TCCEstufas\\website\\src\\views\\relatorios\\Relatorios.js",["124","125","126","127","128"],"import 'react-date-range/dist/styles.css';\r\nimport 'react-date-range/dist/theme/default.css';\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport { Button, Grid } from 'semantic-ui-react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport axios from 'axios';\r\nimport moment from 'moment';\r\nimport uniqid from 'uniqid';\r\nimport { DateRangePicker } from 'react-date-range';\r\nimport { pt } from 'react-date-range/src/locale'\r\n\r\nconst options = {\r\n    scales: {\r\n        y: {\r\n            beginAtZero: true\r\n        }\r\n    }\r\n};\r\n\r\nconst cores = [\r\n    \"#00a4df\",\r\n    \"#21b2aa\"\r\n];\r\n\r\nconst Relatorios = () => {\r\n    let refChart = useRef();\r\n    const [data, setData] = useState({\r\n        labels: [],\r\n        datasets: [],\r\n        key: uniqid()\r\n    })\r\n\r\n    const [culturas, setCulturas] = useState([])\r\n    const [controladores, setControladores] = useState([])\r\n    const [sensores, setSensores] = useState([])\r\n    const [leituras, setLeituras] = useState([])\r\n    const [selectionRange, setSelectionRange] = useState({\r\n        startDate: new Date(),\r\n        endDate: new Date(),\r\n        key: 'selection',\r\n    })\r\n\r\n    const getLeituras = async () => {\r\n        let response = await axios.get('/leituras')\r\n\r\n        let { culturas, controladores, sensores, leituras } = response.data\r\n        await setCulturas(culturas)\r\n        await setControladores(controladores)\r\n        await setSensores(sensores)\r\n        await setLeituras(leituras)\r\n\r\n        montarRelatorio(culturas, controladores, sensores)\r\n    }\r\n\r\n\r\n    const montarRelatorio = async (culturas, controladores, sensores, selectionRange = {startDate: new Date(), endDate: new Date()}) => {\r\n        let periodo = `${moment(selectionRange.startDate).format('DD/MM/YYYY')} - ${moment(selectionRange.endDate).format('DD/MM/YYYY')}`\r\n        \r\n        let newData = {\r\n            labels: [],\r\n            datasets: [],\r\n            key: uniqid()\r\n        }\r\n\r\n        let response = await axios.get('/relatorio', { params: { 'prd': periodo } })\r\n        let leiturasRelatorio = response.data\r\n        let dataIni = moment(selectionRange.startDate).format('YYYY-MM-DD')\r\n        let date = moment(dataIni)\r\n        let dateFinal = moment(selectionRange.endDate)\r\n\r\n        while (dateFinal.isSameOrAfter(date)) {\r\n            newData.labels.push(date.format('DD/MM/YYYY'))\r\n\r\n            date.add(1, 'day')\r\n        }\r\n        culturas.forEach((item, index) => {\r\n            let controladoresAux = controladores.filter(con => con.cultura_id === item.id)\r\n            \r\n            controladoresAux.forEach(con => {\r\n                let sensoresAux = sensores.filter(sensor => sensor.controlador_id == con.id)\r\n\r\n                sensoresAux.forEach(async sensor => {\r\n                    let dataset = {\r\n                        label: sensor.descricao,\r\n                        data: [],\r\n                        fill: false,\r\n                        backgroundColor: cores[index],\r\n                        borderColor: cores[index],\r\n                        uniqid: uniqid()\r\n                    }\r\n\r\n                    date = moment(dataIni)\r\n\r\n                    while (dateFinal.isSameOrAfter(date)) {\r\n                        let leitura = leiturasRelatorio.find(leitura => {\r\n                            return leitura.data === date.format('DD/MM/YYYY') && leitura.sensor_id == sensor.id\r\n                        })\r\n\r\n                        if (leitura) {\r\n                            dataset.data.push(parseFloat(leitura.valor))\r\n                        } else {\r\n                            dataset.data.push(0.00)\r\n                        }\r\n                        date.add(1, 'day')\r\n                    }\r\n\r\n                    newData.datasets.push(dataset)\r\n                })\r\n            })\r\n        })\r\n        newData.key = uniqid();\r\n        setData(newData)\r\n\r\n        if(refChart.current != null) {\r\n            refChart.current.data = newData\r\n            refChart.current.update()\r\n        }\r\n    }\r\n\r\n    const handleDateRangeChange = (date) => { \r\n        setSelectionRange({\r\n            ...selectionRange, \r\n            startDate: date.selection.startDate, \r\n            endDate: date.selection.endDate\r\n        })\r\n    \r\n        montarRelatorio(culturas, controladores, sensores, {...date.selection})\r\n    }\r\n\r\n    useEffect(() => {\r\n        getLeituras()\r\n    }, [])\r\n\r\n    return <>\r\n        <Grid>\r\n            <Grid.Row>\r\n                <Grid.Column floated='left' width={16}>\r\n                    <h1>\r\n                        Relatório de Leituras\r\n                    </h1>\r\n                    <Button onClick={() => {}} color='primary' floated='right' style={{ position: 'absolute', top: 5, right: 0}}>\r\n                        Filtrar\r\n                    </Button>\r\n                </Grid.Column>\r\n            </Grid.Row>\r\n            <Grid.Row>\r\n                <DateRangePicker\r\n                    locale={pt}\r\n                    showDateDisplay={false}\r\n                    ariaLabels= {{\r\n                        monthPicker: \"PropTypes.string\",\r\n                        yearPicker: \"PropTypes.string\",\r\n                        prevButton: \"PropTypes.string\",\r\n                        nextButton: \"PropTypes.string\",\r\n                    }}\r\n                    ranges={[selectionRange]}\r\n                    onChange={handleDateRangeChange}\r\n                />\r\n            </Grid.Row>\r\n            <Line ref={refChart} id={uniqid()} redraw={true} data={data} options={options} />\r\n\r\n            <Grid.Row style={{ paddingBottom: 0 }}>\r\n                <h3>Legenda:</h3>\r\n            </Grid.Row>\r\n            <Grid.Row>\r\n                {\r\n                    culturas.map((item, index) => {\r\n                        return <div style={{ display: 'flex', flexDirection: 'row' }} key={uniqid()}>\r\n                            <div style={{ width: 20, height: 20, backgroundColor: cores[index], marginRight: 4 }}></div>\r\n                            <div style={{ marginRight: 8 }}>{item.descricao}</div>\r\n                        </div>\r\n                    })\r\n                }\r\n            </Grid.Row>\r\n        </Grid>\r\n    </>\r\n}\r\n\r\nexport default Relatorios","C:\\Users\\Matheus Oliveira\\Code\\TCCEstufas\\website\\src\\store\\index.js",["129","130","131","132","133"],"import { createStore, compose, applyMiddleware } from 'redux'\nimport rootReducer from './reducers'\nimport history from '../views/history'\nimport { connectRouter } from 'connected-react-router';\nimport { routerMiddleware } from 'connected-react-router'\n\nexport default createStore(rootReducer)","C:\\Users\\Matheus Oliveira\\Code\\TCCEstufas\\website\\src\\store\\reducers\\index.js",["134"],"import { connectRouter } from 'connected-react-router'\nimport { combineReducers } from 'redux'\n\nimport app from './app'\n\nexport default combineReducers({\n    app\n})","C:\\Users\\Matheus Oliveira\\Code\\TCCEstufas\\website\\src\\store\\reducers\\app.js",[],"C:\\Users\\Matheus Oliveira\\Code\\TCCEstufas\\website\\src\\store\\actions\\app.js",[],"C:\\Users\\Matheus Oliveira\\Code\\TCCEstufas\\website\\src\\views\\history.js",[],{"ruleId":"135","replacedBy":"136"},{"ruleId":"137","replacedBy":"138"},{"ruleId":"139","severity":1,"message":"140","line":7,"column":20,"nodeType":"141","messageId":"142","endLine":7,"endColumn":31},{"ruleId":"139","severity":1,"message":"143","line":8,"column":10,"nodeType":"141","messageId":"142","endLine":8,"endColumn":25},{"ruleId":"139","severity":1,"message":"144","line":8,"column":23,"nodeType":"141","messageId":"142","endLine":8,"endColumn":34},{"ruleId":"139","severity":1,"message":"145","line":9,"column":13,"nodeType":"141","messageId":"142","endLine":9,"endColumn":23},{"ruleId":"139","severity":1,"message":"146","line":14,"column":11,"nodeType":"141","messageId":"142","endLine":14,"endColumn":19},{"ruleId":"135","replacedBy":"147"},{"ruleId":"137","replacedBy":"148"},{"ruleId":"139","severity":1,"message":"149","line":4,"column":8,"nodeType":"141","messageId":"142","endLine":4,"endColumn":14},{"ruleId":"139","severity":1,"message":"150","line":7,"column":7,"nodeType":"141","messageId":"142","endLine":7,"endColumn":10},{"ruleId":"151","severity":1,"message":"152","line":28,"column":15,"nodeType":"153","endLine":35,"endColumn":6},{"ruleId":"139","severity":1,"message":"154","line":3,"column":16,"nodeType":"141","messageId":"142","endLine":3,"endColumn":24},{"ruleId":"139","severity":1,"message":"149","line":4,"column":8,"nodeType":"141","messageId":"142","endLine":4,"endColumn":14},{"ruleId":"139","severity":1,"message":"150","line":7,"column":7,"nodeType":"141","messageId":"142","endLine":7,"endColumn":10},{"ruleId":"151","severity":1,"message":"152","line":26,"column":15,"nodeType":"153","endLine":30,"endColumn":6},{"ruleId":"139","severity":1,"message":"150","line":6,"column":7,"nodeType":"141","messageId":"142","endLine":6,"endColumn":10},{"ruleId":"151","severity":1,"message":"152","line":69,"column":15,"nodeType":"153","endLine":85,"endColumn":6},{"ruleId":"155","severity":1,"message":"156","line":207,"column":9,"nodeType":"157","messageId":"158","endLine":216,"endColumn":10},{"ruleId":"159","severity":1,"message":"160","line":303,"column":69,"nodeType":"161","messageId":"162","endLine":303,"endColumn":71},{"ruleId":"139","severity":1,"message":"163","line":2,"column":19,"nodeType":"141","messageId":"142","endLine":2,"endColumn":23},{"ruleId":"159","severity":1,"message":"160","line":7,"column":65,"nodeType":"161","messageId":"162","endLine":7,"endColumn":67},{"ruleId":"139","severity":1,"message":"164","line":36,"column":12,"nodeType":"141","messageId":"142","endLine":36,"endColumn":20},{"ruleId":"159","severity":1,"message":"160","line":80,"column":83,"nodeType":"161","messageId":"162","endLine":80,"endColumn":85},{"ruleId":"165","severity":1,"message":"166","line":95,"column":62,"nodeType":"153","messageId":"167","endLine":97,"endColumn":26},{"ruleId":"159","severity":1,"message":"160","line":96,"column":100,"nodeType":"161","messageId":"162","endLine":96,"endColumn":102},{"ruleId":"151","severity":1,"message":"168","line":132,"column":8,"nodeType":"169","endLine":132,"endColumn":10,"suggestions":"170"},{"ruleId":"139","severity":1,"message":"171","line":1,"column":23,"nodeType":"141","messageId":"142","endLine":1,"endColumn":30},{"ruleId":"139","severity":1,"message":"172","line":1,"column":32,"nodeType":"141","messageId":"142","endLine":1,"endColumn":47},{"ruleId":"139","severity":1,"message":"173","line":3,"column":8,"nodeType":"141","messageId":"142","endLine":3,"endColumn":15},{"ruleId":"139","severity":1,"message":"174","line":4,"column":10,"nodeType":"141","messageId":"142","endLine":4,"endColumn":23},{"ruleId":"139","severity":1,"message":"175","line":5,"column":10,"nodeType":"141","messageId":"142","endLine":5,"endColumn":26},{"ruleId":"139","severity":1,"message":"174","line":1,"column":10,"nodeType":"141","messageId":"142","endLine":1,"endColumn":23},"no-native-reassign",["176"],"no-negated-in-lhs",["177"],"no-unused-vars","'useDispatch' is defined but never used.","Identifier","unusedVar","'ConnectedRouter' is defined but never used.","'useSelector' is defined but never used.","'AppActions' is defined but never used.","'dispatch' is assigned a value but never used.",["176"],["177"],"'uniqid' is defined but never used.","'val' is assigned a value but never used.","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","'Checkbox' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Grid' is defined but never used.","'leituras' is assigned a value but never used.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'date'.","unsafeRefs","React Hook useEffect has a missing dependency: 'getLeituras'. Either include it or remove the dependency array.","ArrayExpression",["178"],"'compose' is defined but never used.","'applyMiddleware' is defined but never used.","'history' is defined but never used.","'connectRouter' is defined but never used.","'routerMiddleware' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"179","fix":"180"},"Update the dependencies array to be: [getLeituras]",{"range":"181","text":"182"},[4385,4387],"[getLeituras]"]